<!DOCTYPE html>
<html>
<head lang="zh-cn">
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="description" content="">
    <meta name="keywords" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>佛山市实验学校_协同学校_佛山市协同学校_佛山协同国际学校</title>
    <meta name="Keywords" content="佛山市实验学校,协同学校,佛山市协同学校,佛山协同国际学校">
    <meta name="Description"
          content="佛山市协同（国际）学校，由佛山市实验学校教育集团管理运营，与美国协同教育集团战略合作，是一所国际化、特色化、精英化的学校。国内教育部为小学初中9年一贯制（将开设高中部），国际教育部为幼儿园小学初中高中15年一贯制。秉承“协性同心、和人济世”的教育理念，培养适应现代、走向世界、引领未来的精英人才。">
    <meta name="renderer" content="webkit">
    <meta http-equiv="Cache-Control" content="no-siteapp"/>
    <link rel="stylesheet" href="css/bootstrap.min.css"/>
    <link rel="stylesheet" href="css/style.css"/>
    <script src="js/react.min.js"></script>
    <script src="js/react-dom.min.js"></script>
    <script src="js/browser.min.js"></script>
    <script src="js/react-bootstrap.min.js"></script>
    <script src="js/reqwest.min.js"></script>
    <script src="js/util.js"></script>
    <script src="js/rc-form.min.js"></script>

</head>
<body id="root">
</body>
<script type="text/babel">
    class Component extends React.Component {
        constructor(props) {
            super(props);

            this.state = {
                is_load: false,
                result_type: "",
                result_message: ""
            }
        }

        componentDidMount() {

        }

        componentWillUnmount() {

        }

        handlSubmit() {
            this.props.form.validateFields((errors, value) => {
                if (!!errors) {
                    var message = '';
                    for (var error in errors) {
                        message += "<p>";
                        message += errors[error].errors[0].message;
                        message += "</p>";
                    }
                    this.setState({
                        result_type: 'danger',
                        result_message: message
                    });

                    return;
                }

                this.setState({
                    is_load: true,
                    result_type: ""
                });

                request({
                    url: '/mobile/xietong/student/login',
                    data: value,
                    success: function (data) {
                        setToken(data.token);
                        setStudentName(data.student_name);
                        setClazzName(data.clazz_name);

                        this.setState({
                            result_type: 'success',
                            result_message: '登录成功'
                        });

                        setTimeout(function () {
                            window.location.href = '/index.html';
                        }.bind(this), 500);
                    }.bind(this),
                    error: function (data) {
                        this.setState({
                            result_type: 'danger',
                            result_message: data.message
                        });
                    }.bind(this),
                    complete: function () {
                        this.setState({
                            is_load: false
                        });
                    }.bind(this)
                });
            });
        }

        handleLogin() {
            login();
        }

        handleLogout() {
            logout();
        }

        render() {
            const Navbar = ReactBootstrap.Navbar;
            const Nav = ReactBootstrap.Nav;
            const NavItem = ReactBootstrap.NavItem;
            const NavDropdown = ReactBootstrap.NavDropdown;
            const MenuItem = ReactBootstrap.MenuItem;
            const Carousel = ReactBootstrap.Carousel;
            const Form = ReactBootstrap.Form;
            const FormGroup = ReactBootstrap.FormGroup;
            const Col = ReactBootstrap.Col;
            const FormControl = ReactBootstrap.FormControl;
            const ControlLabel = ReactBootstrap.ControlLabel;
            const Button = ReactBootstrap.Button;
            const Alert = ReactBootstrap.Alert;
            const {getFieldProps, getFieldError, getFieldValue} = this.props.form;

            return (
                    <div>
                        #include("header.template")
                        <Carousel className="banner" controls={false}>
                            <Carousel.Item>
                                <img src="image/banner04.jpg" style={{marginLeft: "auto", marginRight: "auto"}} alt=""/>
                            </Carousel.Item>
                        </Carousel>
                        <div className="main">
                            <div className="container">
                                <div className="row">
                                    <div className="col-md-2 row-clo hidden-sm hidden-xs">
                                        <div className="main-left-title">
                                            <div className="main-left-title-1">L</div>
                                            <div className="main-left-title-2">学生登录</div>
                                            <div className="main-left-title-3">OGIN</div>
                                        </div>
                                        <div className="main-left-menu">
                                            <li className="active"><a href="login.html">学生登录</a></li>
                                        </div>
                                        #include("left_column.template")
                                    </div>
                                    <div className="col-md-10 row-clo">
                                        <div className="main-right-title">
                                            	学生登录
                                            <div className="main-right-title-extra">
                                                <a href="index.html">首页</a> &gt;<a>学生登录</a>
                                            </div>
                                        </div>
                                        <div className="col-md-12 main-right-content">
                                            <Form horizontal className="form">
                                                <FormGroup {...getFieldProps('user_account', {
                                                    rules: [{
                                                        required: true,
                                                        message: '学号不能为空'
                                                    }],
                                                    initialValue: ''
                                                })} validationState={getFieldError('user_account') ? 'error' : getFieldValue('user_account') == '' ? null : 'success'}>
                                                    <Col componentClass={ControlLabel} sm={2}>
                                                        	学号
                                                    </Col>
                                                    <Col sm={7}>
                                                        <FormControl placeholder="请输入学号"/>
                                                        <FormControl.Feedback/>
                                                        <span className="error-message">{getFieldError('user_account')}</span>
                                                    </Col>
                                                </FormGroup>

                                                <FormGroup {...getFieldProps('user_password', {
                                                    rules: [{
                                                        required: true,
                                                        message: '密码不能为空'
                                                    }],
                                                    initialValue: ''
                                                })} validationState={getFieldError('user_password') ? 'error' : getFieldValue('user_password') == '' ? null : 'success'}>
                                                    <Col componentClass={ControlLabel} sm={2}>
                                                        密码
                                                    </Col>
                                                    <Col sm={7}>
                                                        <FormControl type="password" placeholder="请输入密码"/>
                                                        <FormControl.Feedback/>
                                                        <span className="error-message">{getFieldError('user_password')}</span>
                                                    </Col>
                                                </FormGroup>

                                                <FormGroup>
                                                    <Col smOffset={2} sm={7}>
                                                        <Button disabled={this.state.is_load}
                                                                onClick={this.handlSubmit.bind(this)}>
                                                            {this.state.is_load ? "加载中.." : "登录系统"}
                                                        </Button>
                                                    </Col>
                                                </FormGroup>

                                                <FormGroup>
                                                    <Col smOffset={2} sm={7}>
                                                        {
                                                            this.state.result_type == "" ?
                                                                ""
                                                                :
                                                                    <Alert bsStyle={this.state.result_type}>
                                                                        <h4>系统提示</h4>
                                                                        <div className="margin-top-15"
                                                                             dangerouslySetInnerHTML={{__html: this.state.result_message}}></div>
                                                                    </Alert>
                                                        }
                                                    </Col>
                                                </FormGroup>
                                            </Form>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        #include("footer.template")
                    </div>
            );
        }
    }


    const Form = window['rc-form'];
    Component = Form.createForm()(Component);

    ReactDOM.render(<Component/>, document.getElementById("root"));
</script>